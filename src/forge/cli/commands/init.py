"""Implementation of the ``forge init`` command."""

from __future__ import annotations

from pathlib import Path
from importlib.metadata import PackageNotFoundError, version

import typer
from rich.console import Console
from sqlalchemy import create_engine
from sqlalchemy.orm import Session

from ...core.schema import Base, ProjectState


# Each command module exposes its own ``Typer`` instance.  The main CLI app
# registers these sub-apps using :func:`typer.Typer.add_typer`.
app = typer.Typer(help="Initialise a new Forge project")
console = Console()


def _get_version() -> str:
    """Return the installed Forge version or a sensible default."""

    try:
        return version("forge")
    except PackageNotFoundError:  # pragma: no cover - best effort fallback
        return "0.0.0"


def _write_default_config(config_path: Path, project_name: str) -> None:
    """Create a default ``forge.toml`` configuration file."""

    template = f"""# forge.toml: generated by `forge init`

[project]
name = "{project_name}"

[sources]
source_dirs = ["src"]
include_patterns = ["**/*.f90", "**/*.F90"]
exclude_patterns = []

[parser]
encoding = "utf-8"
"""

    config_path.write_text(template)


@app.callback(invoke_without_command=True)
def init() -> None:
    """Initialise the current working directory as a Forge project.

    The command creates a ``forge.toml`` configuration file and the ``.forge``
    directory which houses the project state SQLite database.  If these items
    already exist the command aborts with an error message.
    """

    project_root = Path.cwd()
    config_path = project_root / "forge.toml"
    forge_dir = project_root / ".forge"

    if config_path.exists():
        console.print(f"[red]Configuration file '{config_path}' already exists.[/red]")
        raise typer.Exit(code=1)

    if forge_dir.exists() and any(forge_dir.iterdir()):
        console.print(f"[red]Directory '{forge_dir}' already exists and is not empty.[/red]")
        raise typer.Exit(code=1)

    # ------------------------------------------------------------------
    # 1. Write default configuration
    _write_default_config(config_path, project_root.name)
    console.print(f"[green]Created configuration at {config_path}[/green]")

    # ------------------------------------------------------------------
    # 2. Prepare state database
    forge_dir.mkdir(exist_ok=True)
    db_path = forge_dir / "forge.sqlite3"
    engine = create_engine(f"sqlite:///{db_path}")
    Base.metadata.create_all(engine)

    # Insert initial project state
    with Session(engine) as session:
        session.add(
            ProjectState(
                project_name=project_root.name,
                forge_version=_get_version(),
            )
        )
        session.commit()

    console.print(f"[green]Initialised project database at {db_path}[/green]")

    console.print("[bold green]Forge project initialised successfully.[/bold green]")


__all__ = ["app"]

